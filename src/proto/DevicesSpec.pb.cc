// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DevicesSpec.proto

#include "DevicesSpec.pb.h"

#include <algorithm>

#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/wire_format.h>
#include <google/protobuf/wire_format_lite_inl.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_DevicesSpec_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_DevicesSpec_2eproto ::google::
    protobuf::internal::SCCInfo<0>
        scc_info_ControllerConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_DevicesSpec_2eproto ::google::
    protobuf::internal::SCCInfo<0>
        scc_info_Fan;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_DevicesSpec_2eproto ::google::
    protobuf::internal::SCCInfo<0>
        scc_info_Sensor;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_DevicesSpec_2eproto ::google::
    protobuf::internal::SCCInfo<2>
        scc_info_Devices;
} // namespace protobuf_DevicesSpec_2eproto
namespace fc_pb {
class ControllerDefaultTypeInternal {
public:
  ::google::protobuf::internal::ExplicitlyConstructed<Controller> _instance;
} _Controller_default_instance_;
class ControllerConfigDefaultTypeInternal {
public:
  ::google::protobuf::internal::ExplicitlyConstructed<ControllerConfig>
      _instance;
} _ControllerConfig_default_instance_;
class DevicesDefaultTypeInternal {
public:
  ::google::protobuf::internal::ExplicitlyConstructed<Devices> _instance;
} _Devices_default_instance_;
class FanDefaultTypeInternal {
public:
  ::google::protobuf::internal::ExplicitlyConstructed<Fan> _instance;
} _Fan_default_instance_;
class SensorDefaultTypeInternal {
public:
  ::google::protobuf::internal::ExplicitlyConstructed<Sensor> _instance;
} _Sensor_default_instance_;
class DevicesRequestDefaultTypeInternal {
public:
  ::google::protobuf::internal::ExplicitlyConstructed<DevicesRequest> _instance;
} _DevicesRequest_default_instance_;
class ControllerStateDefaultTypeInternal {
public:
  ::google::protobuf::internal::ExplicitlyConstructed<ControllerState>
      _instance;
} _ControllerState_default_instance_;
class EmptyDefaultTypeInternal {
public:
  ::google::protobuf::internal::ExplicitlyConstructed<Empty> _instance;
} _Empty_default_instance_;
} // namespace fc_pb
namespace protobuf_DevicesSpec_2eproto {
static void InitDefaultsController() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void *ptr = &::fc_pb::_Controller_default_instance_;
    new (ptr)::fc_pb::Controller();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fc_pb::Controller::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Controller = {
    {ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized),
     2, InitDefaultsController},
    {
        &protobuf_DevicesSpec_2eproto::scc_info_ControllerConfig.base,
        &protobuf_DevicesSpec_2eproto::scc_info_Devices.base,
    }};

static void InitDefaultsControllerConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void *ptr = &::fc_pb::_ControllerConfig_default_instance_;
    new (ptr)::fc_pb::ControllerConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fc_pb::ControllerConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ControllerConfig = {
    {ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized),
     0, InitDefaultsControllerConfig},
    {}};

static void InitDefaultsDevices() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void *ptr = &::fc_pb::_Devices_default_instance_;
    new (ptr)::fc_pb::Devices();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fc_pb::Devices::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Devices = {
    {ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized),
     2, InitDefaultsDevices},
    {
        &protobuf_DevicesSpec_2eproto::scc_info_Fan.base,
        &protobuf_DevicesSpec_2eproto::scc_info_Sensor.base,
    }};

static void InitDefaultsFan() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void *ptr = &::fc_pb::_Fan_default_instance_;
    new (ptr)::fc_pb::Fan();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fc_pb::Fan::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Fan = {
    {ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized),
     0, InitDefaultsFan},
    {}};

static void InitDefaultsSensor() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void *ptr = &::fc_pb::_Sensor_default_instance_;
    new (ptr)::fc_pb::Sensor();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fc_pb::Sensor::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Sensor = {
    {ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized),
     0, InitDefaultsSensor},
    {}};

static void InitDefaultsDevicesRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void *ptr = &::fc_pb::_DevicesRequest_default_instance_;
    new (ptr)::fc_pb::DevicesRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fc_pb::DevicesRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DevicesRequest = {
    {ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized),
     0, InitDefaultsDevicesRequest},
    {}};

static void InitDefaultsControllerState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void *ptr = &::fc_pb::_ControllerState_default_instance_;
    new (ptr)::fc_pb::ControllerState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fc_pb::ControllerState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ControllerState = {
    {ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized),
     0, InitDefaultsControllerState},
    {}};

static void InitDefaultsEmpty() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void *ptr = &::fc_pb::_Empty_default_instance_;
    new (ptr)::fc_pb::Empty();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fc_pb::Empty::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Empty = {
    {ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized),
     0, InitDefaultsEmpty},
    {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Controller.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ControllerConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Devices.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Fan.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Sensor.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DevicesRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ControllerState.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Empty.base);
}

::google::protobuf::Metadata file_level_metadata[8];
const ::google::protobuf::EnumDescriptor *file_level_enum_descriptors[2];

const ::google::protobuf::uint32
    TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u, // no _has_bits_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fc_pb::Controller,
                                                       _internal_metadata_),
        ~0u, // no _extensions_
        ~0u, // no _oneof_case_
        ~0u, // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fc_pb::Controller,
                                                       config_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fc_pb::Controller,
                                                       devices_),
        ~0u, // no _has_bits_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::fc_pb::ControllerConfig, _internal_metadata_),
        ~0u, // no _extensions_
        ~0u, // no _oneof_case_
        ~0u, // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::fc_pb::ControllerConfig, update_interval_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::fc_pb::ControllerConfig, dynamic_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::fc_pb::ControllerConfig, smoothing_intervals_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::fc_pb::ControllerConfig, top_stickiness_intervals_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(
            ::fc_pb::ControllerConfig, temp_averaging_intervals_),
        ~0u, // no _has_bits_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fc_pb::Devices,
                                                       _internal_metadata_),
        ~0u, // no _extensions_
        ~0u, // no _oneof_case_
        ~0u, // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fc_pb::Devices, fan_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fc_pb::Devices,
                                                       sensor_),
        ~0u, // no _has_bits_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fc_pb::Fan,
                                                       _internal_metadata_),
        ~0u, // no _extensions_
        ~0u, // no _oneof_case_
        ~0u, // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fc_pb::Fan, type_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fc_pb::Fan, label_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fc_pb::Fan, sensor_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fc_pb::Fan,
                                                       temp_to_rpm_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fc_pb::Fan,
                                                       rpm_to_pwm_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fc_pb::Fan,
                                                       start_pwm_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fc_pb::Fan, interval_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fc_pb::Fan, ignore_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fc_pb::Fan, pwm_path_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fc_pb::Fan, rpm_path_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fc_pb::Fan,
                                                       enable_path_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fc_pb::Fan,
                                                       driver_flag_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fc_pb::Fan, id_),
        ~0u, // no _has_bits_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fc_pb::Sensor,
                                                       _internal_metadata_),
        ~0u, // no _extensions_
        ~0u, // no _oneof_case_
        ~0u, // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fc_pb::Sensor, type_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fc_pb::Sensor, label_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fc_pb::Sensor,
                                                       input_path_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fc_pb::Sensor,
                                                       enable_path_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fc_pb::Sensor,
                                                       fault_path_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fc_pb::Sensor,
                                                       min_path_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fc_pb::Sensor,
                                                       max_path_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fc_pb::Sensor,
                                                       crit_path_),
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fc_pb::Sensor, id_),
        ~0u, // no _has_bits_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fc_pb::DevicesRequest,
                                                       _internal_metadata_),
        ~0u, // no _extensions_
        ~0u, // no _oneof_case_
        ~0u, // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fc_pb::DevicesRequest,
                                                       include_unsupported_),
        ~0u, // no _has_bits_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fc_pb::ControllerState,
                                                       _internal_metadata_),
        ~0u, // no _extensions_
        ~0u, // no _oneof_case_
        ~0u, // no _weak_field_map_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fc_pb::ControllerState,
                                                       state_),
        ~0u, // no _has_bits_
        GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fc_pb::Empty,
                                                       _internal_metadata_),
        ~0u, // no _extensions_
        ~0u, // no _oneof_case_
        ~0u, // no _weak_field_map_
};
static const ::google::protobuf::internal::MigrationSchema
    schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, sizeof(::fc_pb::Controller)},
        {7, -1, sizeof(::fc_pb::ControllerConfig)},
        {17, -1, sizeof(::fc_pb::Devices)},
        {24, -1, sizeof(::fc_pb::Fan)},
        {42, -1, sizeof(::fc_pb::Sensor)},
        {56, -1, sizeof(::fc_pb::DevicesRequest)},
        {62, -1, sizeof(::fc_pb::ControllerState)},
        {68, -1, sizeof(::fc_pb::Empty)},
};

static ::google::protobuf::Message const *const file_default_instances[] = {
    reinterpret_cast<const ::google::protobuf::Message *>(
        &::fc_pb::_Controller_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message *>(
        &::fc_pb::_ControllerConfig_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message *>(
        &::fc_pb::_Devices_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message *>(
        &::fc_pb::_Fan_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message *>(
        &::fc_pb::_Sensor_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message *>(
        &::fc_pb::_DevicesRequest_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message *>(
        &::fc_pb::_ControllerState_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message *>(
        &::fc_pb::_Empty_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors("DevicesSpec.proto", schemas, file_default_instances,
                    TableStruct::offsets, file_level_metadata,
                    file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string &)
    GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string &) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(
      protodesc_cold) = {
      "\n\021DevicesSpec.proto\022\005fc_pb\"V\n\nController"
      "\022\'\n\006config\030\001 \001(\0132\027.fc_pb.ControllerConfi"
      "g\022\037\n\007devices\030\002 "
      "\001(\0132\016.fc_pb.Devices\"\235\001\n\020C"
      "ontrollerConfig\022\027\n\017update_interval\030\001 \001(\r"
      "\022\017\n\007dynamic\030\002 \001(\010\022\033\n\023smoothing_intervals"
      "\030\003 \001(\r\022 \n\030top_stickiness_intervals\030\004 \001(\r"
      "\022 \n\030temp_averaging_intervals\030\005 \001(\r\"A\n\007De"
      "vices\022\027\n\003fan\030\001 "
      "\003(\0132\n.fc_pb.Fan\022\035\n\006sensor"
      "\030\002 "
      "\003(\0132\r.fc_pb.Sensor\"\372\001\n\003Fan\022\034\n\004type\030\001 "
      "\001(\0162\016.fc_pb.DevType\022\r\n\005label\030\002 "
      "\001(\t\022\016\n\006se"
      "nsor\030\003 \001(\t\022\023\n\013temp_to_rpm\030\004 "
      "\001(\t\022\022\n\nrpm_t"
      "o_pwm\030\005 \001(\t\022\021\n\tstart_pwm\030\006 "
      "\001(\r\022\020\n\010interv"
      "al\030\007 \001(\004\022\016\n\006ignore\030\010 "
      "\001(\010\022\020\n\010pwm_path\030\n \001"
      "(\t\022\020\n\010rpm_path\030\013 "
      "\001(\t\022\023\n\013enable_path\030\014 \001("
      "\t\022\023\n\013driver_flag\030\r \001(\005\022\n\n\002id\030\024 "
      "\001(\r\"\265\001\n\006S"
      "ensor\022\034\n\004type\030\001 "
      "\001(\0162\016.fc_pb.DevType\022\r\n\005l"
      "abel\030\002 \001(\t\022\022\n\ninput_path\030\n "
      "\001(\t\022\023\n\013enable"
      "_path\030\013 \001(\t\022\022\n\nfault_path\030\014 "
      "\001(\t\022\020\n\010min_p"
      "ath\030\r \001(\t\022\020\n\010max_path\030\016 "
      "\001(\t\022\021\n\tcrit_path"
      "\030\017 \001(\t\022\n\n\002id\030\024 "
      "\001(\005\"-\n\016DevicesRequest\022\033\n\023"
      "include_unsupported\030\001 \001(\010\"q\n\017ControllerS"
      "tate\022+\n\005state\030\001 \001(\0162\034.fc_pb.ControllerSt"
      "ate."
      "State\"1\n\005State\022\010\n\004STOP\020\000\022\007\n\003RUN\020\001"
      "\022\013\n"
      "\007RESTART\020\002\022\010\n\004TEST\020\003\"\007\n\005Empty*("
      "\n\007DevType"
      "\022\007\n\003SYS\020\000\022\010\n\004DELL\020\001\022\n\n\006NVIDIA"
      "\020\0022\353\002\n\010DSer"
      "vice\022<\n\022GetControllerState\022\014.fc_pb.Empty"
      "\032\026.fc_pb.ControllerState\"\000\022<\n\022SetControl"
      "lerState\022\026.fc_pb.ControllerState\032\014.fc_pb"
      ".Empty\"\000\022>\n\023GetControllerConfig\022\014.fc_pb."
      "Empty\032\027.fc_pb.ControllerConfig\"\000\022>\n\023SetC"
      "ontrollerConfig\022\027.fc_pb.ControllerConfig"
      "\032\014.fc_pb.Empty\"\000\0225\n\nGetDevices\022\025.fc_pb.D"
      "evicesRequest\032\016.fc_pb.Devices\"\000\022,\n\nSetDe"
      "vices\022\016.fc_pb.Devices\032\014.fc_pb.Empty\"\000b\006p"
      "roto3"};
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(descriptor,
                                                               1365);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
      "DevicesSpec.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() { AddDescriptors(); }
} static_descriptor_initializer;
} // namespace protobuf_DevicesSpec_2eproto
namespace fc_pb {
const ::google::protobuf::EnumDescriptor *ControllerState_State_descriptor() {
  protobuf_DevicesSpec_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DevicesSpec_2eproto::file_level_enum_descriptors[0];
}
bool ControllerState_State_IsValid(int value) {
  switch (value) {
  case 0:
  case 1:
  case 2:
  case 3:
    return true;
  default:
    return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ControllerState_State ControllerState::STOP;
const ControllerState_State ControllerState::RUN;
const ControllerState_State ControllerState::RESTART;
const ControllerState_State ControllerState::TEST;
const ControllerState_State ControllerState::State_MIN;
const ControllerState_State ControllerState::State_MAX;
const int ControllerState::State_ARRAYSIZE;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor *DevType_descriptor() {
  protobuf_DevicesSpec_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DevicesSpec_2eproto::file_level_enum_descriptors[1];
}
bool DevType_IsValid(int value) {
  switch (value) {
  case 0:
  case 1:
  case 2:
    return true;
  default:
    return false;
  }
}

// ===================================================================

void Controller::InitAsDefaultInstance() {
  ::fc_pb::_Controller_default_instance_._instance.get_mutable()->config_ =
      const_cast<::fc_pb::ControllerConfig *>(
          ::fc_pb::ControllerConfig::internal_default_instance());
  ::fc_pb::_Controller_default_instance_._instance.get_mutable()->devices_ =
      const_cast<::fc_pb::Devices *>(
          ::fc_pb::Devices::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Controller::kConfigFieldNumber;
const int Controller::kDevicesFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

Controller::Controller()
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DevicesSpec_2eproto::scc_info_Controller.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:fc_pb.Controller)
}
Controller::Controller(const Controller &from)
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_config()) {
    config_ = new ::fc_pb::ControllerConfig(*from.config_);
  } else {
    config_ = NULL;
  }
  if (from.has_devices()) {
    devices_ = new ::fc_pb::Devices(*from.devices_);
  } else {
    devices_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:fc_pb.Controller)
}

void Controller::SharedCtor() {
  ::memset(&config_, 0,
           static_cast<size_t>(reinterpret_cast<char *>(&devices_) -
                               reinterpret_cast<char *>(&config_)) +
               sizeof(devices_));
}

Controller::~Controller() {
  // @@protoc_insertion_point(destructor:fc_pb.Controller)
  SharedDtor();
}

void Controller::SharedDtor() {
  if (this != internal_default_instance())
    delete config_;
  if (this != internal_default_instance())
    delete devices_;
}

void Controller::SetCachedSize(int size) const { _cached_size_.Set(size); }
const ::google::protobuf::Descriptor *Controller::descriptor() {
  ::protobuf_DevicesSpec_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DevicesSpec_2eproto::file_level_metadata
      [kIndexInFileMessages]
          .descriptor;
}

const Controller &Controller::default_instance() {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DevicesSpec_2eproto::scc_info_Controller.base);
  return *internal_default_instance();
}

void Controller::Clear() {
  // @@protoc_insertion_point(message_clear_start:fc_pb.Controller)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
  if (GetArenaNoVirtual() == NULL && devices_ != NULL) {
    delete devices_;
  }
  devices_ = NULL;
  _internal_metadata_.Clear();
}

bool Controller::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream *input) {
#define DO_(EXPRESSION)                                                        \
  if (!GOOGLE_PREDICT_TRUE(EXPRESSION))                                        \
  goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fc_pb.Controller)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second)
      goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
    // .fc_pb.ControllerConfig config = 1;
    case 1: {
      if (static_cast<::google::protobuf::uint8>(tag) ==
          static_cast<::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
            input, mutable_config()));
      } else {
        goto handle_unusual;
      }
      break;
    }

    // .fc_pb.Devices devices = 2;
    case 2: {
      if (static_cast<::google::protobuf::uint8>(tag) ==
          static_cast<::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
            input, mutable_devices()));
      } else {
        goto handle_unusual;
      }
      break;
    }

    default: {
    handle_unusual:
      if (tag == 0) {
        goto success;
      }
      DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
      break;
    }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fc_pb.Controller)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fc_pb.Controller)
  return false;
#undef DO_
}

void Controller::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream *output) const {
  // @@protoc_insertion_point(serialize_start:fc_pb.Controller)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // .fc_pb.ControllerConfig config = 1;
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, this->_internal_config(), output);
  }

  // .fc_pb.Devices devices = 2;
  if (this->has_devices()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, this->_internal_devices(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&
       ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
             ? _internal_metadata_.unknown_fields()
             : _internal_metadata_.default_instance()),
        output);
  }
  // @@protoc_insertion_point(serialize_end:fc_pb.Controller)
}

::google::protobuf::uint8 *Controller::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8 *target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fc_pb.Controller)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // .fc_pb.ControllerConfig config = 1;
  if (this->has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(1, this->_internal_config(), deterministic,
                                    target);
  }

  // .fc_pb.Devices devices = 2;
  if (this->has_devices()) {
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(2, this->_internal_devices(), deterministic,
                                    target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&
       ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
                 ? _internal_metadata_.unknown_fields()
                 : _internal_metadata_.default_instance()),
            target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fc_pb.Controller)
  return target;
}

size_t Controller::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:fc_pb.Controller)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&
       ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
                 ? _internal_metadata_.unknown_fields()
                 : _internal_metadata_.default_instance()));
  }
  // .fc_pb.ControllerConfig config = 1;
  if (this->has_config()) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*config_);
  }

  // .fc_pb.Devices devices = 2;
  if (this->has_devices()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSize(
                          *devices_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Controller::MergeFrom(const ::google::protobuf::Message &from) {
  // @@protoc_insertion_point(generalized_merge_from_start:fc_pb.Controller)
  GOOGLE_DCHECK_NE(&from, this);
  const Controller *source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Controller>(
          &from);
  if (source == NULL) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:fc_pb.Controller)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:fc_pb.Controller)
    MergeFrom(*source);
  }
}

void Controller::MergeFrom(const Controller &from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:fc_pb.Controller)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (from.has_config()) {
    mutable_config()->::fc_pb::ControllerConfig::MergeFrom(from.config());
  }
  if (from.has_devices()) {
    mutable_devices()->::fc_pb::Devices::MergeFrom(from.devices());
  }
}

void Controller::CopyFrom(const ::google::protobuf::Message &from) {
  // @@protoc_insertion_point(generalized_copy_from_start:fc_pb.Controller)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void Controller::CopyFrom(const Controller &from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:fc_pb.Controller)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool Controller::IsInitialized() const { return true; }

void Controller::Swap(Controller *other) {
  if (other == this)
    return;
  InternalSwap(other);
}
void Controller::InternalSwap(Controller *other) {
  using std::swap;
  swap(config_, other->config_);
  swap(devices_, other->devices_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Controller::GetMetadata() const {
  protobuf_DevicesSpec_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DevicesSpec_2eproto::file_level_metadata
      [kIndexInFileMessages];
}

// ===================================================================

void ControllerConfig::InitAsDefaultInstance() {}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ControllerConfig::kUpdateIntervalFieldNumber;
const int ControllerConfig::kDynamicFieldNumber;
const int ControllerConfig::kSmoothingIntervalsFieldNumber;
const int ControllerConfig::kTopStickinessIntervalsFieldNumber;
const int ControllerConfig::kTempAveragingIntervalsFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

ControllerConfig::ControllerConfig()
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DevicesSpec_2eproto::scc_info_ControllerConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:fc_pb.ControllerConfig)
}
ControllerConfig::ControllerConfig(const ControllerConfig &from)
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(
      &update_interval_, &from.update_interval_,
      static_cast<size_t>(reinterpret_cast<char *>(&temp_averaging_intervals_) -
                          reinterpret_cast<char *>(&update_interval_)) +
          sizeof(temp_averaging_intervals_));
  // @@protoc_insertion_point(copy_constructor:fc_pb.ControllerConfig)
}

void ControllerConfig::SharedCtor() {
  ::memset(
      &update_interval_, 0,
      static_cast<size_t>(reinterpret_cast<char *>(&temp_averaging_intervals_) -
                          reinterpret_cast<char *>(&update_interval_)) +
          sizeof(temp_averaging_intervals_));
}

ControllerConfig::~ControllerConfig() {
  // @@protoc_insertion_point(destructor:fc_pb.ControllerConfig)
  SharedDtor();
}

void ControllerConfig::SharedDtor() {}

void ControllerConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor *ControllerConfig::descriptor() {
  ::protobuf_DevicesSpec_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DevicesSpec_2eproto::file_level_metadata
      [kIndexInFileMessages]
          .descriptor;
}

const ControllerConfig &ControllerConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DevicesSpec_2eproto::scc_info_ControllerConfig.base);
  return *internal_default_instance();
}

void ControllerConfig::Clear() {
  // @@protoc_insertion_point(message_clear_start:fc_pb.ControllerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::memset(
      &update_interval_, 0,
      static_cast<size_t>(reinterpret_cast<char *>(&temp_averaging_intervals_) -
                          reinterpret_cast<char *>(&update_interval_)) +
          sizeof(temp_averaging_intervals_));
  _internal_metadata_.Clear();
}

bool ControllerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream *input) {
#define DO_(EXPRESSION)                                                        \
  if (!GOOGLE_PREDICT_TRUE(EXPRESSION))                                        \
  goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fc_pb.ControllerConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second)
      goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
    // uint32 update_interval = 1;
    case 1: {
      if (static_cast<::google::protobuf::uint8>(tag) ==
          static_cast<::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

        DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
             ::google::protobuf::uint32,
             ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
            input, &update_interval_)));
      } else {
        goto handle_unusual;
      }
      break;
    }

    // bool dynamic = 2;
    case 2: {
      if (static_cast<::google::protobuf::uint8>(tag) ==
          static_cast<::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

        DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
             bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
            input, &dynamic_)));
      } else {
        goto handle_unusual;
      }
      break;
    }

    // uint32 smoothing_intervals = 3;
    case 3: {
      if (static_cast<::google::protobuf::uint8>(tag) ==
          static_cast<::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

        DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
             ::google::protobuf::uint32,
             ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
            input, &smoothing_intervals_)));
      } else {
        goto handle_unusual;
      }
      break;
    }

    // uint32 top_stickiness_intervals = 4;
    case 4: {
      if (static_cast<::google::protobuf::uint8>(tag) ==
          static_cast<::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

        DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
             ::google::protobuf::uint32,
             ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
            input, &top_stickiness_intervals_)));
      } else {
        goto handle_unusual;
      }
      break;
    }

    // uint32 temp_averaging_intervals = 5;
    case 5: {
      if (static_cast<::google::protobuf::uint8>(tag) ==
          static_cast<::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

        DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
             ::google::protobuf::uint32,
             ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
            input, &temp_averaging_intervals_)));
      } else {
        goto handle_unusual;
      }
      break;
    }

    default: {
    handle_unusual:
      if (tag == 0) {
        goto success;
      }
      DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
      break;
    }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fc_pb.ControllerConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fc_pb.ControllerConfig)
  return false;
#undef DO_
}

void ControllerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream *output) const {
  // @@protoc_insertion_point(serialize_start:fc_pb.ControllerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 update_interval = 1;
  if (this->update_interval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
        1, this->update_interval(), output);
  }

  // bool dynamic = 2;
  if (this->dynamic() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->dynamic(),
                                                            output);
  }

  // uint32 smoothing_intervals = 3;
  if (this->smoothing_intervals() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
        3, this->smoothing_intervals(), output);
  }

  // uint32 top_stickiness_intervals = 4;
  if (this->top_stickiness_intervals() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
        4, this->top_stickiness_intervals(), output);
  }

  // uint32 temp_averaging_intervals = 5;
  if (this->temp_averaging_intervals() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
        5, this->temp_averaging_intervals(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&
       ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
             ? _internal_metadata_.unknown_fields()
             : _internal_metadata_.default_instance()),
        output);
  }
  // @@protoc_insertion_point(serialize_end:fc_pb.ControllerConfig)
}

::google::protobuf::uint8 *
ControllerConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8 *target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fc_pb.ControllerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 update_interval = 1;
  if (this->update_interval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(
        1, this->update_interval(), target);
  }

  // bool dynamic = 2;
  if (this->dynamic() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(
        2, this->dynamic(), target);
  }

  // uint32 smoothing_intervals = 3;
  if (this->smoothing_intervals() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(
        3, this->smoothing_intervals(), target);
  }

  // uint32 top_stickiness_intervals = 4;
  if (this->top_stickiness_intervals() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(
        4, this->top_stickiness_intervals(), target);
  }

  // uint32 temp_averaging_intervals = 5;
  if (this->temp_averaging_intervals() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(
        5, this->temp_averaging_intervals(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&
       ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
                 ? _internal_metadata_.unknown_fields()
                 : _internal_metadata_.default_instance()),
            target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fc_pb.ControllerConfig)
  return target;
}

size_t ControllerConfig::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:fc_pb.ControllerConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&
       ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
                 ? _internal_metadata_.unknown_fields()
                 : _internal_metadata_.default_instance()));
  }
  // uint32 update_interval = 1;
  if (this->update_interval() != 0) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(
                          this->update_interval());
  }

  // bool dynamic = 2;
  if (this->dynamic() != 0) {
    total_size += 1 + 1;
  }

  // uint32 smoothing_intervals = 3;
  if (this->smoothing_intervals() != 0) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(
                          this->smoothing_intervals());
  }

  // uint32 top_stickiness_intervals = 4;
  if (this->top_stickiness_intervals() != 0) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(
                          this->top_stickiness_intervals());
  }

  // uint32 temp_averaging_intervals = 5;
  if (this->temp_averaging_intervals() != 0) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(
                          this->temp_averaging_intervals());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControllerConfig::MergeFrom(const ::google::protobuf::Message &from) {
  // @@protoc_insertion_point(generalized_merge_from_start:fc_pb.ControllerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ControllerConfig *source =
      ::google::protobuf::internal::DynamicCastToGenerated<
          const ControllerConfig>(&from);
  if (source == NULL) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:fc_pb.ControllerConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:fc_pb.ControllerConfig)
    MergeFrom(*source);
  }
}

void ControllerConfig::MergeFrom(const ControllerConfig &from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:fc_pb.ControllerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (from.update_interval() != 0) {
    set_update_interval(from.update_interval());
  }
  if (from.dynamic() != 0) {
    set_dynamic(from.dynamic());
  }
  if (from.smoothing_intervals() != 0) {
    set_smoothing_intervals(from.smoothing_intervals());
  }
  if (from.top_stickiness_intervals() != 0) {
    set_top_stickiness_intervals(from.top_stickiness_intervals());
  }
  if (from.temp_averaging_intervals() != 0) {
    set_temp_averaging_intervals(from.temp_averaging_intervals());
  }
}

void ControllerConfig::CopyFrom(const ::google::protobuf::Message &from) {
  // @@protoc_insertion_point(generalized_copy_from_start:fc_pb.ControllerConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void ControllerConfig::CopyFrom(const ControllerConfig &from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:fc_pb.ControllerConfig)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool ControllerConfig::IsInitialized() const { return true; }

void ControllerConfig::Swap(ControllerConfig *other) {
  if (other == this)
    return;
  InternalSwap(other);
}
void ControllerConfig::InternalSwap(ControllerConfig *other) {
  using std::swap;
  swap(update_interval_, other->update_interval_);
  swap(dynamic_, other->dynamic_);
  swap(smoothing_intervals_, other->smoothing_intervals_);
  swap(top_stickiness_intervals_, other->top_stickiness_intervals_);
  swap(temp_averaging_intervals_, other->temp_averaging_intervals_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ControllerConfig::GetMetadata() const {
  protobuf_DevicesSpec_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DevicesSpec_2eproto::file_level_metadata
      [kIndexInFileMessages];
}

// ===================================================================

void Devices::InitAsDefaultInstance() {}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Devices::kFanFieldNumber;
const int Devices::kSensorFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

Devices::Devices() : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DevicesSpec_2eproto::scc_info_Devices.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:fc_pb.Devices)
}
Devices::Devices(const Devices &from)
    : ::google::protobuf::Message(), _internal_metadata_(NULL), fan_(from.fan_),
      sensor_(from.sensor_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:fc_pb.Devices)
}

void Devices::SharedCtor() {}

Devices::~Devices() {
  // @@protoc_insertion_point(destructor:fc_pb.Devices)
  SharedDtor();
}

void Devices::SharedDtor() {}

void Devices::SetCachedSize(int size) const { _cached_size_.Set(size); }
const ::google::protobuf::Descriptor *Devices::descriptor() {
  ::protobuf_DevicesSpec_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DevicesSpec_2eproto::file_level_metadata
      [kIndexInFileMessages]
          .descriptor;
}

const Devices &Devices::default_instance() {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DevicesSpec_2eproto::scc_info_Devices.base);
  return *internal_default_instance();
}

void Devices::Clear() {
  // @@protoc_insertion_point(message_clear_start:fc_pb.Devices)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  fan_.Clear();
  sensor_.Clear();
  _internal_metadata_.Clear();
}

bool Devices::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream *input) {
#define DO_(EXPRESSION)                                                        \
  if (!GOOGLE_PREDICT_TRUE(EXPRESSION))                                        \
  goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fc_pb.Devices)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second)
      goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
    // repeated .fc_pb.Fan fan = 1;
    case 1: {
      if (static_cast<::google::protobuf::uint8>(tag) ==
          static_cast<::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
            input, add_fan()));
      } else {
        goto handle_unusual;
      }
      break;
    }

    // repeated .fc_pb.Sensor sensor = 2;
    case 2: {
      if (static_cast<::google::protobuf::uint8>(tag) ==
          static_cast<::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
            input, add_sensor()));
      } else {
        goto handle_unusual;
      }
      break;
    }

    default: {
    handle_unusual:
      if (tag == 0) {
        goto success;
      }
      DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
      break;
    }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fc_pb.Devices)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fc_pb.Devices)
  return false;
#undef DO_
}

void Devices::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream *output) const {
  // @@protoc_insertion_point(serialize_start:fc_pb.Devices)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .fc_pb.Fan fan = 1;
  for (unsigned int i = 0, n = static_cast<unsigned int>(this->fan_size());
       i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, this->fan(static_cast<int>(i)), output);
  }

  // repeated .fc_pb.Sensor sensor = 2;
  for (unsigned int i = 0, n = static_cast<unsigned int>(this->sensor_size());
       i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, this->sensor(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&
       ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
             ? _internal_metadata_.unknown_fields()
             : _internal_metadata_.default_instance()),
        output);
  }
  // @@protoc_insertion_point(serialize_end:fc_pb.Devices)
}

::google::protobuf::uint8 *Devices::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8 *target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fc_pb.Devices)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .fc_pb.Fan fan = 1;
  for (unsigned int i = 0, n = static_cast<unsigned int>(this->fan_size());
       i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(1, this->fan(static_cast<int>(i)),
                                    deterministic, target);
  }

  // repeated .fc_pb.Sensor sensor = 2;
  for (unsigned int i = 0, n = static_cast<unsigned int>(this->sensor_size());
       i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(2, this->sensor(static_cast<int>(i)),
                                    deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&
       ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
                 ? _internal_metadata_.unknown_fields()
                 : _internal_metadata_.default_instance()),
            target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fc_pb.Devices)
  return target;
}

size_t Devices::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:fc_pb.Devices)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&
       ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
                 ? _internal_metadata_.unknown_fields()
                 : _internal_metadata_.default_instance()));
  }
  // repeated .fc_pb.Fan fan = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->fan_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->fan(static_cast<int>(i)));
    }
  }

  // repeated .fc_pb.Sensor sensor = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->sensor_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->sensor(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Devices::MergeFrom(const ::google::protobuf::Message &from) {
  // @@protoc_insertion_point(generalized_merge_from_start:fc_pb.Devices)
  GOOGLE_DCHECK_NE(&from, this);
  const Devices *source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Devices>(
          &from);
  if (source == NULL) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:fc_pb.Devices)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:fc_pb.Devices)
    MergeFrom(*source);
  }
}

void Devices::MergeFrom(const Devices &from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:fc_pb.Devices)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  fan_.MergeFrom(from.fan_);
  sensor_.MergeFrom(from.sensor_);
}

void Devices::CopyFrom(const ::google::protobuf::Message &from) {
  // @@protoc_insertion_point(generalized_copy_from_start:fc_pb.Devices)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void Devices::CopyFrom(const Devices &from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:fc_pb.Devices)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool Devices::IsInitialized() const { return true; }

void Devices::Swap(Devices *other) {
  if (other == this)
    return;
  InternalSwap(other);
}
void Devices::InternalSwap(Devices *other) {
  using std::swap;
  CastToBase(&fan_)->InternalSwap(CastToBase(&other->fan_));
  CastToBase(&sensor_)->InternalSwap(CastToBase(&other->sensor_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Devices::GetMetadata() const {
  protobuf_DevicesSpec_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DevicesSpec_2eproto::file_level_metadata
      [kIndexInFileMessages];
}

// ===================================================================

void Fan::InitAsDefaultInstance() {}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Fan::kTypeFieldNumber;
const int Fan::kLabelFieldNumber;
const int Fan::kSensorFieldNumber;
const int Fan::kTempToRpmFieldNumber;
const int Fan::kRpmToPwmFieldNumber;
const int Fan::kStartPwmFieldNumber;
const int Fan::kIntervalFieldNumber;
const int Fan::kIgnoreFieldNumber;
const int Fan::kPwmPathFieldNumber;
const int Fan::kRpmPathFieldNumber;
const int Fan::kEnablePathFieldNumber;
const int Fan::kDriverFlagFieldNumber;
const int Fan::kIdFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

Fan::Fan() : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DevicesSpec_2eproto::scc_info_Fan.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:fc_pb.Fan)
}
Fan::Fan(const Fan &from)
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  label_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.label().size() > 0) {
    label_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.label_);
  }
  sensor_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sensor().size() > 0) {
    sensor_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.sensor_);
  }
  temp_to_rpm_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.temp_to_rpm().size() > 0) {
    temp_to_rpm_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.temp_to_rpm_);
  }
  rpm_to_pwm_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.rpm_to_pwm().size() > 0) {
    rpm_to_pwm_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.rpm_to_pwm_);
  }
  pwm_path_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pwm_path().size() > 0) {
    pwm_path_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.pwm_path_);
  }
  rpm_path_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.rpm_path().size() > 0) {
    rpm_path_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.rpm_path_);
  }
  enable_path_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.enable_path().size() > 0) {
    enable_path_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.enable_path_);
  }
  ::memcpy(&type_, &from.type_,
           static_cast<size_t>(reinterpret_cast<char *>(&id_) -
                               reinterpret_cast<char *>(&type_)) +
               sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:fc_pb.Fan)
}

void Fan::SharedCtor() {
  label_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sensor_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  temp_to_rpm_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rpm_to_pwm_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwm_path_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rpm_path_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enable_path_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0,
           static_cast<size_t>(reinterpret_cast<char *>(&id_) -
                               reinterpret_cast<char *>(&type_)) +
               sizeof(id_));
}

Fan::~Fan() {
  // @@protoc_insertion_point(destructor:fc_pb.Fan)
  SharedDtor();
}

void Fan::SharedDtor() {
  label_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sensor_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  temp_to_rpm_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rpm_to_pwm_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwm_path_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rpm_path_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enable_path_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Fan::SetCachedSize(int size) const { _cached_size_.Set(size); }
const ::google::protobuf::Descriptor *Fan::descriptor() {
  ::protobuf_DevicesSpec_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DevicesSpec_2eproto::file_level_metadata
      [kIndexInFileMessages]
          .descriptor;
}

const Fan &Fan::default_instance() {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DevicesSpec_2eproto::scc_info_Fan.base);
  return *internal_default_instance();
}

void Fan::Clear() {
  // @@protoc_insertion_point(message_clear_start:fc_pb.Fan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  label_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sensor_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  temp_to_rpm_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rpm_to_pwm_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwm_path_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rpm_path_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enable_path_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0,
           static_cast<size_t>(reinterpret_cast<char *>(&id_) -
                               reinterpret_cast<char *>(&type_)) +
               sizeof(id_));
  _internal_metadata_.Clear();
}

bool Fan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream *input) {
#define DO_(EXPRESSION)                                                        \
  if (!GOOGLE_PREDICT_TRUE(EXPRESSION))                                        \
  goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fc_pb.Fan)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second)
      goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
    // .fc_pb.DevType type = 1;
    case 1: {
      if (static_cast<::google::protobuf::uint8>(tag) ==
          static_cast<::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
        int value;
        DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
             int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
            input, &value)));
        set_type(static_cast<::fc_pb::DevType>(value));
      } else {
        goto handle_unusual;
      }
      break;
    }

    // string label = 2;
    case 2: {
      if (static_cast<::google::protobuf::uint8>(tag) ==
          static_cast<::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
            input, this->mutable_label()));
        DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->label().data(), static_cast<int>(this->label().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "fc_pb.Fan.label"));
      } else {
        goto handle_unusual;
      }
      break;
    }

    // string sensor = 3;
    case 3: {
      if (static_cast<::google::protobuf::uint8>(tag) ==
          static_cast<::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
            input, this->mutable_sensor()));
        DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sensor().data(), static_cast<int>(this->sensor().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "fc_pb.Fan.sensor"));
      } else {
        goto handle_unusual;
      }
      break;
    }

    // string temp_to_rpm = 4;
    case 4: {
      if (static_cast<::google::protobuf::uint8>(tag) ==
          static_cast<::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
            input, this->mutable_temp_to_rpm()));
        DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->temp_to_rpm().data(),
            static_cast<int>(this->temp_to_rpm().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "fc_pb.Fan.temp_to_rpm"));
      } else {
        goto handle_unusual;
      }
      break;
    }

    // string rpm_to_pwm = 5;
    case 5: {
      if (static_cast<::google::protobuf::uint8>(tag) ==
          static_cast<::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
            input, this->mutable_rpm_to_pwm()));
        DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rpm_to_pwm().data(),
            static_cast<int>(this->rpm_to_pwm().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "fc_pb.Fan.rpm_to_pwm"));
      } else {
        goto handle_unusual;
      }
      break;
    }

    // uint32 start_pwm = 6;
    case 6: {
      if (static_cast<::google::protobuf::uint8>(tag) ==
          static_cast<::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

        DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
             ::google::protobuf::uint32,
             ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
            input, &start_pwm_)));
      } else {
        goto handle_unusual;
      }
      break;
    }

    // uint64 interval = 7;
    case 7: {
      if (static_cast<::google::protobuf::uint8>(tag) ==
          static_cast<::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

        DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
             ::google::protobuf::uint64,
             ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
            input, &interval_)));
      } else {
        goto handle_unusual;
      }
      break;
    }

    // bool ignore = 8;
    case 8: {
      if (static_cast<::google::protobuf::uint8>(tag) ==
          static_cast<::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

        DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
             bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
            input, &ignore_)));
      } else {
        goto handle_unusual;
      }
      break;
    }

    // string pwm_path = 10;
    case 10: {
      if (static_cast<::google::protobuf::uint8>(tag) ==
          static_cast<::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
            input, this->mutable_pwm_path()));
        DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pwm_path().data(),
            static_cast<int>(this->pwm_path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "fc_pb.Fan.pwm_path"));
      } else {
        goto handle_unusual;
      }
      break;
    }

    // string rpm_path = 11;
    case 11: {
      if (static_cast<::google::protobuf::uint8>(tag) ==
          static_cast<::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
            input, this->mutable_rpm_path()));
        DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rpm_path().data(),
            static_cast<int>(this->rpm_path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "fc_pb.Fan.rpm_path"));
      } else {
        goto handle_unusual;
      }
      break;
    }

    // string enable_path = 12;
    case 12: {
      if (static_cast<::google::protobuf::uint8>(tag) ==
          static_cast<::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
            input, this->mutable_enable_path()));
        DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->enable_path().data(),
            static_cast<int>(this->enable_path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "fc_pb.Fan.enable_path"));
      } else {
        goto handle_unusual;
      }
      break;
    }

    // int32 driver_flag = 13;
    case 13: {
      if (static_cast<::google::protobuf::uint8>(tag) ==
          static_cast<::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

        DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
             ::google::protobuf::int32,
             ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
            input, &driver_flag_)));
      } else {
        goto handle_unusual;
      }
      break;
    }

    // uint32 id = 20;
    case 20: {
      if (static_cast<::google::protobuf::uint8>(tag) ==
          static_cast<::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {

        DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
             ::google::protobuf::uint32,
             ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(input,
                                                                        &id_)));
      } else {
        goto handle_unusual;
      }
      break;
    }

    default: {
    handle_unusual:
      if (tag == 0) {
        goto success;
      }
      DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
      break;
    }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fc_pb.Fan)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fc_pb.Fan)
  return false;
#undef DO_
}

void Fan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream *output) const {
  // @@protoc_insertion_point(serialize_start:fc_pb.Fan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // .fc_pb.DevType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(1, this->type(),
                                                            output);
  }

  // string label = 2;
  if (this->label().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->label().data(), static_cast<int>(this->label().length()),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "fc_pb.Fan.label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        2, this->label(), output);
  }

  // string sensor = 3;
  if (this->sensor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->sensor().data(), static_cast<int>(this->sensor().length()),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "fc_pb.Fan.sensor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        3, this->sensor(), output);
  }

  // string temp_to_rpm = 4;
  if (this->temp_to_rpm().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->temp_to_rpm().data(),
        static_cast<int>(this->temp_to_rpm().length()),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "fc_pb.Fan.temp_to_rpm");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        4, this->temp_to_rpm(), output);
  }

  // string rpm_to_pwm = 5;
  if (this->rpm_to_pwm().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->rpm_to_pwm().data(),
        static_cast<int>(this->rpm_to_pwm().length()),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "fc_pb.Fan.rpm_to_pwm");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        5, this->rpm_to_pwm(), output);
  }

  // uint32 start_pwm = 6;
  if (this->start_pwm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
        6, this->start_pwm(), output);
  }

  // uint64 interval = 7;
  if (this->interval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
        7, this->interval(), output);
  }

  // bool ignore = 8;
  if (this->ignore() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->ignore(),
                                                            output);
  }

  // string pwm_path = 10;
  if (this->pwm_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->pwm_path().data(), static_cast<int>(this->pwm_path().length()),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "fc_pb.Fan.pwm_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        10, this->pwm_path(), output);
  }

  // string rpm_path = 11;
  if (this->rpm_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->rpm_path().data(), static_cast<int>(this->rpm_path().length()),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "fc_pb.Fan.rpm_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        11, this->rpm_path(), output);
  }

  // string enable_path = 12;
  if (this->enable_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->enable_path().data(),
        static_cast<int>(this->enable_path().length()),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "fc_pb.Fan.enable_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        12, this->enable_path(), output);
  }

  // int32 driver_flag = 13;
  if (this->driver_flag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
        13, this->driver_flag(), output);
  }

  // uint32 id = 20;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->id(),
                                                              output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&
       ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
             ? _internal_metadata_.unknown_fields()
             : _internal_metadata_.default_instance()),
        output);
  }
  // @@protoc_insertion_point(serialize_end:fc_pb.Fan)
}

::google::protobuf::uint8 *Fan::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8 *target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fc_pb.Fan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // .fc_pb.DevType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
        1, this->type(), target);
  }

  // string label = 2;
  if (this->label().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->label().data(), static_cast<int>(this->label().length()),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "fc_pb.Fan.label");
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->label(), target);
  }

  // string sensor = 3;
  if (this->sensor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->sensor().data(), static_cast<int>(this->sensor().length()),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "fc_pb.Fan.sensor");
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sensor(), target);
  }

  // string temp_to_rpm = 4;
  if (this->temp_to_rpm().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->temp_to_rpm().data(),
        static_cast<int>(this->temp_to_rpm().length()),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "fc_pb.Fan.temp_to_rpm");
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->temp_to_rpm(), target);
  }

  // string rpm_to_pwm = 5;
  if (this->rpm_to_pwm().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->rpm_to_pwm().data(),
        static_cast<int>(this->rpm_to_pwm().length()),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "fc_pb.Fan.rpm_to_pwm");
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->rpm_to_pwm(), target);
  }

  // uint32 start_pwm = 6;
  if (this->start_pwm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(
        6, this->start_pwm(), target);
  }

  // uint64 interval = 7;
  if (this->interval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(
        7, this->interval(), target);
  }

  // bool ignore = 8;
  if (this->ignore() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(
        8, this->ignore(), target);
  }

  // string pwm_path = 10;
  if (this->pwm_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->pwm_path().data(), static_cast<int>(this->pwm_path().length()),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "fc_pb.Fan.pwm_path");
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->pwm_path(), target);
  }

  // string rpm_path = 11;
  if (this->rpm_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->rpm_path().data(), static_cast<int>(this->rpm_path().length()),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "fc_pb.Fan.rpm_path");
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->rpm_path(), target);
  }

  // string enable_path = 12;
  if (this->enable_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->enable_path().data(),
        static_cast<int>(this->enable_path().length()),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "fc_pb.Fan.enable_path");
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->enable_path(), target);
  }

  // int32 driver_flag = 13;
  if (this->driver_flag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        13, this->driver_flag(), target);
  }

  // uint32 id = 20;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(
        20, this->id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&
       ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
                 ? _internal_metadata_.unknown_fields()
                 : _internal_metadata_.default_instance()),
            target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fc_pb.Fan)
  return target;
}

size_t Fan::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:fc_pb.Fan)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&
       ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
                 ? _internal_metadata_.unknown_fields()
                 : _internal_metadata_.default_instance()));
  }
  // string label = 2;
  if (this->label().size() > 0) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                          this->label());
  }

  // string sensor = 3;
  if (this->sensor().size() > 0) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                          this->sensor());
  }

  // string temp_to_rpm = 4;
  if (this->temp_to_rpm().size() > 0) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                          this->temp_to_rpm());
  }

  // string rpm_to_pwm = 5;
  if (this->rpm_to_pwm().size() > 0) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                          this->rpm_to_pwm());
  }

  // string pwm_path = 10;
  if (this->pwm_path().size() > 0) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                          this->pwm_path());
  }

  // string rpm_path = 11;
  if (this->rpm_path().size() > 0) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                          this->rpm_path());
  }

  // string enable_path = 12;
  if (this->enable_path().size() > 0) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                          this->enable_path());
  }

  // .fc_pb.DevType type = 1;
  if (this->type() != 0) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(
                          this->type());
  }

  // uint32 start_pwm = 6;
  if (this->start_pwm() != 0) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(
                          this->start_pwm());
  }

  // uint64 interval = 7;
  if (this->interval() != 0) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::UInt64Size(
                          this->interval());
  }

  // bool ignore = 8;
  if (this->ignore() != 0) {
    total_size += 1 + 1;
  }

  // int32 driver_flag = 13;
  if (this->driver_flag() != 0) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                          this->driver_flag());
  }

  // uint32 id = 20;
  if (this->id() != 0) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::UInt32Size(
                          this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Fan::MergeFrom(const ::google::protobuf::Message &from) {
  // @@protoc_insertion_point(generalized_merge_from_start:fc_pb.Fan)
  GOOGLE_DCHECK_NE(&from, this);
  const Fan *source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Fan>(&from);
  if (source == NULL) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:fc_pb.Fan)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:fc_pb.Fan)
    MergeFrom(*source);
  }
}

void Fan::MergeFrom(const Fan &from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:fc_pb.Fan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (from.label().size() > 0) {

    label_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.label_);
  }
  if (from.sensor().size() > 0) {

    sensor_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.sensor_);
  }
  if (from.temp_to_rpm().size() > 0) {

    temp_to_rpm_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.temp_to_rpm_);
  }
  if (from.rpm_to_pwm().size() > 0) {

    rpm_to_pwm_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.rpm_to_pwm_);
  }
  if (from.pwm_path().size() > 0) {

    pwm_path_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.pwm_path_);
  }
  if (from.rpm_path().size() > 0) {

    rpm_path_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.rpm_path_);
  }
  if (from.enable_path().size() > 0) {

    enable_path_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.enable_path_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.start_pwm() != 0) {
    set_start_pwm(from.start_pwm());
  }
  if (from.interval() != 0) {
    set_interval(from.interval());
  }
  if (from.ignore() != 0) {
    set_ignore(from.ignore());
  }
  if (from.driver_flag() != 0) {
    set_driver_flag(from.driver_flag());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void Fan::CopyFrom(const ::google::protobuf::Message &from) {
  // @@protoc_insertion_point(generalized_copy_from_start:fc_pb.Fan)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void Fan::CopyFrom(const Fan &from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:fc_pb.Fan)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool Fan::IsInitialized() const { return true; }

void Fan::Swap(Fan *other) {
  if (other == this)
    return;
  InternalSwap(other);
}
void Fan::InternalSwap(Fan *other) {
  using std::swap;
  label_.Swap(&other->label_,
              &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
              GetArenaNoVirtual());
  sensor_.Swap(&other->sensor_,
               &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
               GetArenaNoVirtual());
  temp_to_rpm_.Swap(
      &other->temp_to_rpm_,
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  rpm_to_pwm_.Swap(&other->rpm_to_pwm_,
                   &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                   GetArenaNoVirtual());
  pwm_path_.Swap(&other->pwm_path_,
                 &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                 GetArenaNoVirtual());
  rpm_path_.Swap(&other->rpm_path_,
                 &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                 GetArenaNoVirtual());
  enable_path_.Swap(
      &other->enable_path_,
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(start_pwm_, other->start_pwm_);
  swap(interval_, other->interval_);
  swap(ignore_, other->ignore_);
  swap(driver_flag_, other->driver_flag_);
  swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Fan::GetMetadata() const {
  protobuf_DevicesSpec_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DevicesSpec_2eproto::file_level_metadata
      [kIndexInFileMessages];
}

// ===================================================================

void Sensor::InitAsDefaultInstance() {}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Sensor::kTypeFieldNumber;
const int Sensor::kLabelFieldNumber;
const int Sensor::kInputPathFieldNumber;
const int Sensor::kEnablePathFieldNumber;
const int Sensor::kFaultPathFieldNumber;
const int Sensor::kMinPathFieldNumber;
const int Sensor::kMaxPathFieldNumber;
const int Sensor::kCritPathFieldNumber;
const int Sensor::kIdFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

Sensor::Sensor() : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DevicesSpec_2eproto::scc_info_Sensor.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:fc_pb.Sensor)
}
Sensor::Sensor(const Sensor &from)
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  label_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.label().size() > 0) {
    label_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.label_);
  }
  input_path_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.input_path().size() > 0) {
    input_path_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.input_path_);
  }
  enable_path_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.enable_path().size() > 0) {
    enable_path_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.enable_path_);
  }
  fault_path_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.fault_path().size() > 0) {
    fault_path_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.fault_path_);
  }
  min_path_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.min_path().size() > 0) {
    min_path_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.min_path_);
  }
  max_path_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.max_path().size() > 0) {
    max_path_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.max_path_);
  }
  crit_path_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.crit_path().size() > 0) {
    crit_path_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.crit_path_);
  }
  ::memcpy(&type_, &from.type_,
           static_cast<size_t>(reinterpret_cast<char *>(&id_) -
                               reinterpret_cast<char *>(&type_)) +
               sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:fc_pb.Sensor)
}

void Sensor::SharedCtor() {
  label_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  input_path_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enable_path_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fault_path_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  min_path_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_path_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  crit_path_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0,
           static_cast<size_t>(reinterpret_cast<char *>(&id_) -
                               reinterpret_cast<char *>(&type_)) +
               sizeof(id_));
}

Sensor::~Sensor() {
  // @@protoc_insertion_point(destructor:fc_pb.Sensor)
  SharedDtor();
}

void Sensor::SharedDtor() {
  label_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  input_path_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enable_path_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fault_path_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  min_path_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_path_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  crit_path_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Sensor::SetCachedSize(int size) const { _cached_size_.Set(size); }
const ::google::protobuf::Descriptor *Sensor::descriptor() {
  ::protobuf_DevicesSpec_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DevicesSpec_2eproto::file_level_metadata
      [kIndexInFileMessages]
          .descriptor;
}

const Sensor &Sensor::default_instance() {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DevicesSpec_2eproto::scc_info_Sensor.base);
  return *internal_default_instance();
}

void Sensor::Clear() {
  // @@protoc_insertion_point(message_clear_start:fc_pb.Sensor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  label_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  input_path_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enable_path_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fault_path_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  min_path_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_path_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  crit_path_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0,
           static_cast<size_t>(reinterpret_cast<char *>(&id_) -
                               reinterpret_cast<char *>(&type_)) +
               sizeof(id_));
  _internal_metadata_.Clear();
}

bool Sensor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream *input) {
#define DO_(EXPRESSION)                                                        \
  if (!GOOGLE_PREDICT_TRUE(EXPRESSION))                                        \
  goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fc_pb.Sensor)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second)
      goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
    // .fc_pb.DevType type = 1;
    case 1: {
      if (static_cast<::google::protobuf::uint8>(tag) ==
          static_cast<::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
        int value;
        DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
             int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
            input, &value)));
        set_type(static_cast<::fc_pb::DevType>(value));
      } else {
        goto handle_unusual;
      }
      break;
    }

    // string label = 2;
    case 2: {
      if (static_cast<::google::protobuf::uint8>(tag) ==
          static_cast<::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
            input, this->mutable_label()));
        DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->label().data(), static_cast<int>(this->label().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "fc_pb.Sensor.label"));
      } else {
        goto handle_unusual;
      }
      break;
    }

    // string input_path = 10;
    case 10: {
      if (static_cast<::google::protobuf::uint8>(tag) ==
          static_cast<::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
            input, this->mutable_input_path()));
        DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->input_path().data(),
            static_cast<int>(this->input_path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "fc_pb.Sensor.input_path"));
      } else {
        goto handle_unusual;
      }
      break;
    }

    // string enable_path = 11;
    case 11: {
      if (static_cast<::google::protobuf::uint8>(tag) ==
          static_cast<::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
            input, this->mutable_enable_path()));
        DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->enable_path().data(),
            static_cast<int>(this->enable_path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "fc_pb.Sensor.enable_path"));
      } else {
        goto handle_unusual;
      }
      break;
    }

    // string fault_path = 12;
    case 12: {
      if (static_cast<::google::protobuf::uint8>(tag) ==
          static_cast<::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
            input, this->mutable_fault_path()));
        DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fault_path().data(),
            static_cast<int>(this->fault_path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "fc_pb.Sensor.fault_path"));
      } else {
        goto handle_unusual;
      }
      break;
    }

    // string min_path = 13;
    case 13: {
      if (static_cast<::google::protobuf::uint8>(tag) ==
          static_cast<::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
            input, this->mutable_min_path()));
        DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->min_path().data(),
            static_cast<int>(this->min_path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "fc_pb.Sensor.min_path"));
      } else {
        goto handle_unusual;
      }
      break;
    }

    // string max_path = 14;
    case 14: {
      if (static_cast<::google::protobuf::uint8>(tag) ==
          static_cast<::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
            input, this->mutable_max_path()));
        DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->max_path().data(),
            static_cast<int>(this->max_path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "fc_pb.Sensor.max_path"));
      } else {
        goto handle_unusual;
      }
      break;
    }

    // string crit_path = 15;
    case 15: {
      if (static_cast<::google::protobuf::uint8>(tag) ==
          static_cast<::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
            input, this->mutable_crit_path()));
        DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->crit_path().data(),
            static_cast<int>(this->crit_path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "fc_pb.Sensor.crit_path"));
      } else {
        goto handle_unusual;
      }
      break;
    }

    // int32 id = 20;
    case 20: {
      if (static_cast<::google::protobuf::uint8>(tag) ==
          static_cast<::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {

        DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
             ::google::protobuf::int32,
             ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(input,
                                                                       &id_)));
      } else {
        goto handle_unusual;
      }
      break;
    }

    default: {
    handle_unusual:
      if (tag == 0) {
        goto success;
      }
      DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
      break;
    }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fc_pb.Sensor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fc_pb.Sensor)
  return false;
#undef DO_
}

void Sensor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream *output) const {
  // @@protoc_insertion_point(serialize_start:fc_pb.Sensor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // .fc_pb.DevType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(1, this->type(),
                                                            output);
  }

  // string label = 2;
  if (this->label().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->label().data(), static_cast<int>(this->label().length()),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "fc_pb.Sensor.label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        2, this->label(), output);
  }

  // string input_path = 10;
  if (this->input_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->input_path().data(),
        static_cast<int>(this->input_path().length()),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "fc_pb.Sensor.input_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        10, this->input_path(), output);
  }

  // string enable_path = 11;
  if (this->enable_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->enable_path().data(),
        static_cast<int>(this->enable_path().length()),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "fc_pb.Sensor.enable_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        11, this->enable_path(), output);
  }

  // string fault_path = 12;
  if (this->fault_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->fault_path().data(),
        static_cast<int>(this->fault_path().length()),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "fc_pb.Sensor.fault_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        12, this->fault_path(), output);
  }

  // string min_path = 13;
  if (this->min_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->min_path().data(), static_cast<int>(this->min_path().length()),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "fc_pb.Sensor.min_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        13, this->min_path(), output);
  }

  // string max_path = 14;
  if (this->max_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->max_path().data(), static_cast<int>(this->max_path().length()),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "fc_pb.Sensor.max_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        14, this->max_path(), output);
  }

  // string crit_path = 15;
  if (this->crit_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->crit_path().data(), static_cast<int>(this->crit_path().length()),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "fc_pb.Sensor.crit_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        15, this->crit_path(), output);
  }

  // int32 id = 20;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->id(),
                                                             output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&
       ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
             ? _internal_metadata_.unknown_fields()
             : _internal_metadata_.default_instance()),
        output);
  }
  // @@protoc_insertion_point(serialize_end:fc_pb.Sensor)
}

::google::protobuf::uint8 *Sensor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8 *target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fc_pb.Sensor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // .fc_pb.DevType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
        1, this->type(), target);
  }

  // string label = 2;
  if (this->label().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->label().data(), static_cast<int>(this->label().length()),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "fc_pb.Sensor.label");
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->label(), target);
  }

  // string input_path = 10;
  if (this->input_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->input_path().data(),
        static_cast<int>(this->input_path().length()),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "fc_pb.Sensor.input_path");
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->input_path(), target);
  }

  // string enable_path = 11;
  if (this->enable_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->enable_path().data(),
        static_cast<int>(this->enable_path().length()),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "fc_pb.Sensor.enable_path");
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->enable_path(), target);
  }

  // string fault_path = 12;
  if (this->fault_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->fault_path().data(),
        static_cast<int>(this->fault_path().length()),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "fc_pb.Sensor.fault_path");
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->fault_path(), target);
  }

  // string min_path = 13;
  if (this->min_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->min_path().data(), static_cast<int>(this->min_path().length()),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "fc_pb.Sensor.min_path");
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->min_path(), target);
  }

  // string max_path = 14;
  if (this->max_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->max_path().data(), static_cast<int>(this->max_path().length()),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "fc_pb.Sensor.max_path");
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->max_path(), target);
  }

  // string crit_path = 15;
  if (this->crit_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        this->crit_path().data(), static_cast<int>(this->crit_path().length()),
        ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "fc_pb.Sensor.crit_path");
    target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->crit_path(), target);
  }

  // int32 id = 20;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        20, this->id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&
       ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
                 ? _internal_metadata_.unknown_fields()
                 : _internal_metadata_.default_instance()),
            target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fc_pb.Sensor)
  return target;
}

size_t Sensor::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:fc_pb.Sensor)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&
       ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
                 ? _internal_metadata_.unknown_fields()
                 : _internal_metadata_.default_instance()));
  }
  // string label = 2;
  if (this->label().size() > 0) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                          this->label());
  }

  // string input_path = 10;
  if (this->input_path().size() > 0) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                          this->input_path());
  }

  // string enable_path = 11;
  if (this->enable_path().size() > 0) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                          this->enable_path());
  }

  // string fault_path = 12;
  if (this->fault_path().size() > 0) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                          this->fault_path());
  }

  // string min_path = 13;
  if (this->min_path().size() > 0) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                          this->min_path());
  }

  // string max_path = 14;
  if (this->max_path().size() > 0) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                          this->max_path());
  }

  // string crit_path = 15;
  if (this->crit_path().size() > 0) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                          this->crit_path());
  }

  // .fc_pb.DevType type = 1;
  if (this->type() != 0) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(
                          this->type());
  }

  // int32 id = 20;
  if (this->id() != 0) {
    total_size +=
        2 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Sensor::MergeFrom(const ::google::protobuf::Message &from) {
  // @@protoc_insertion_point(generalized_merge_from_start:fc_pb.Sensor)
  GOOGLE_DCHECK_NE(&from, this);
  const Sensor *source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Sensor>(&from);
  if (source == NULL) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:fc_pb.Sensor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:fc_pb.Sensor)
    MergeFrom(*source);
  }
}

void Sensor::MergeFrom(const Sensor &from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:fc_pb.Sensor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (from.label().size() > 0) {

    label_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.label_);
  }
  if (from.input_path().size() > 0) {

    input_path_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.input_path_);
  }
  if (from.enable_path().size() > 0) {

    enable_path_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.enable_path_);
  }
  if (from.fault_path().size() > 0) {

    fault_path_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.fault_path_);
  }
  if (from.min_path().size() > 0) {

    min_path_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.min_path_);
  }
  if (from.max_path().size() > 0) {

    max_path_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.max_path_);
  }
  if (from.crit_path().size() > 0) {

    crit_path_.AssignWithDefault(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        from.crit_path_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void Sensor::CopyFrom(const ::google::protobuf::Message &from) {
  // @@protoc_insertion_point(generalized_copy_from_start:fc_pb.Sensor)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void Sensor::CopyFrom(const Sensor &from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:fc_pb.Sensor)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool Sensor::IsInitialized() const { return true; }

void Sensor::Swap(Sensor *other) {
  if (other == this)
    return;
  InternalSwap(other);
}
void Sensor::InternalSwap(Sensor *other) {
  using std::swap;
  label_.Swap(&other->label_,
              &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
              GetArenaNoVirtual());
  input_path_.Swap(&other->input_path_,
                   &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                   GetArenaNoVirtual());
  enable_path_.Swap(
      &other->enable_path_,
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  fault_path_.Swap(&other->fault_path_,
                   &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                   GetArenaNoVirtual());
  min_path_.Swap(&other->min_path_,
                 &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                 GetArenaNoVirtual());
  max_path_.Swap(&other->max_path_,
                 &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                 GetArenaNoVirtual());
  crit_path_.Swap(&other->crit_path_,
                  &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                  GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Sensor::GetMetadata() const {
  protobuf_DevicesSpec_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DevicesSpec_2eproto::file_level_metadata
      [kIndexInFileMessages];
}

// ===================================================================

void DevicesRequest::InitAsDefaultInstance() {}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DevicesRequest::kIncludeUnsupportedFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

DevicesRequest::DevicesRequest()
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DevicesSpec_2eproto::scc_info_DevicesRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:fc_pb.DevicesRequest)
}
DevicesRequest::DevicesRequest(const DevicesRequest &from)
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  include_unsupported_ = from.include_unsupported_;
  // @@protoc_insertion_point(copy_constructor:fc_pb.DevicesRequest)
}

void DevicesRequest::SharedCtor() { include_unsupported_ = false; }

DevicesRequest::~DevicesRequest() {
  // @@protoc_insertion_point(destructor:fc_pb.DevicesRequest)
  SharedDtor();
}

void DevicesRequest::SharedDtor() {}

void DevicesRequest::SetCachedSize(int size) const { _cached_size_.Set(size); }
const ::google::protobuf::Descriptor *DevicesRequest::descriptor() {
  ::protobuf_DevicesSpec_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DevicesSpec_2eproto::file_level_metadata
      [kIndexInFileMessages]
          .descriptor;
}

const DevicesRequest &DevicesRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DevicesSpec_2eproto::scc_info_DevicesRequest.base);
  return *internal_default_instance();
}

void DevicesRequest::Clear() {
  // @@protoc_insertion_point(message_clear_start:fc_pb.DevicesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  include_unsupported_ = false;
  _internal_metadata_.Clear();
}

bool DevicesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream *input) {
#define DO_(EXPRESSION)                                                        \
  if (!GOOGLE_PREDICT_TRUE(EXPRESSION))                                        \
  goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fc_pb.DevicesRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second)
      goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
    // bool include_unsupported = 1;
    case 1: {
      if (static_cast<::google::protobuf::uint8>(tag) ==
          static_cast<::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

        DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
             bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
            input, &include_unsupported_)));
      } else {
        goto handle_unusual;
      }
      break;
    }

    default: {
    handle_unusual:
      if (tag == 0) {
        goto success;
      }
      DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
      break;
    }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fc_pb.DevicesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fc_pb.DevicesRequest)
  return false;
#undef DO_
}

void DevicesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream *output) const {
  // @@protoc_insertion_point(serialize_start:fc_pb.DevicesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // bool include_unsupported = 1;
  if (this->include_unsupported() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
        1, this->include_unsupported(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&
       ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
             ? _internal_metadata_.unknown_fields()
             : _internal_metadata_.default_instance()),
        output);
  }
  // @@protoc_insertion_point(serialize_end:fc_pb.DevicesRequest)
}

::google::protobuf::uint8 *
DevicesRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8 *target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fc_pb.DevicesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // bool include_unsupported = 1;
  if (this->include_unsupported() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(
        1, this->include_unsupported(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&
       ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
                 ? _internal_metadata_.unknown_fields()
                 : _internal_metadata_.default_instance()),
            target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fc_pb.DevicesRequest)
  return target;
}

size_t DevicesRequest::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:fc_pb.DevicesRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&
       ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
                 ? _internal_metadata_.unknown_fields()
                 : _internal_metadata_.default_instance()));
  }
  // bool include_unsupported = 1;
  if (this->include_unsupported() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DevicesRequest::MergeFrom(const ::google::protobuf::Message &from) {
  // @@protoc_insertion_point(generalized_merge_from_start:fc_pb.DevicesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DevicesRequest *source =
      ::google::protobuf::internal::DynamicCastToGenerated<
          const DevicesRequest>(&from);
  if (source == NULL) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:fc_pb.DevicesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:fc_pb.DevicesRequest)
    MergeFrom(*source);
  }
}

void DevicesRequest::MergeFrom(const DevicesRequest &from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:fc_pb.DevicesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (from.include_unsupported() != 0) {
    set_include_unsupported(from.include_unsupported());
  }
}

void DevicesRequest::CopyFrom(const ::google::protobuf::Message &from) {
  // @@protoc_insertion_point(generalized_copy_from_start:fc_pb.DevicesRequest)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void DevicesRequest::CopyFrom(const DevicesRequest &from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:fc_pb.DevicesRequest)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool DevicesRequest::IsInitialized() const { return true; }

void DevicesRequest::Swap(DevicesRequest *other) {
  if (other == this)
    return;
  InternalSwap(other);
}
void DevicesRequest::InternalSwap(DevicesRequest *other) {
  using std::swap;
  swap(include_unsupported_, other->include_unsupported_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DevicesRequest::GetMetadata() const {
  protobuf_DevicesSpec_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DevicesSpec_2eproto::file_level_metadata
      [kIndexInFileMessages];
}

// ===================================================================

void ControllerState::InitAsDefaultInstance() {}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ControllerState::kStateFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

ControllerState::ControllerState()
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DevicesSpec_2eproto::scc_info_ControllerState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:fc_pb.ControllerState)
}
ControllerState::ControllerState(const ControllerState &from)
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:fc_pb.ControllerState)
}

void ControllerState::SharedCtor() { state_ = 0; }

ControllerState::~ControllerState() {
  // @@protoc_insertion_point(destructor:fc_pb.ControllerState)
  SharedDtor();
}

void ControllerState::SharedDtor() {}

void ControllerState::SetCachedSize(int size) const { _cached_size_.Set(size); }
const ::google::protobuf::Descriptor *ControllerState::descriptor() {
  ::protobuf_DevicesSpec_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DevicesSpec_2eproto::file_level_metadata
      [kIndexInFileMessages]
          .descriptor;
}

const ControllerState &ControllerState::default_instance() {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DevicesSpec_2eproto::scc_info_ControllerState.base);
  return *internal_default_instance();
}

void ControllerState::Clear() {
  // @@protoc_insertion_point(message_clear_start:fc_pb.ControllerState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  state_ = 0;
  _internal_metadata_.Clear();
}

bool ControllerState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream *input) {
#define DO_(EXPRESSION)                                                        \
  if (!GOOGLE_PREDICT_TRUE(EXPRESSION))                                        \
  goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fc_pb.ControllerState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second)
      goto handle_unusual;
    switch (
        ::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
    // .fc_pb.ControllerState.State state = 1;
    case 1: {
      if (static_cast<::google::protobuf::uint8>(tag) ==
          static_cast<::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
        int value;
        DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
             int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
            input, &value)));
        set_state(static_cast<::fc_pb::ControllerState_State>(value));
      } else {
        goto handle_unusual;
      }
      break;
    }

    default: {
    handle_unusual:
      if (tag == 0) {
        goto success;
      }
      DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
      break;
    }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fc_pb.ControllerState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fc_pb.ControllerState)
  return false;
#undef DO_
}

void ControllerState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream *output) const {
  // @@protoc_insertion_point(serialize_start:fc_pb.ControllerState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // .fc_pb.ControllerState.State state = 1;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(1, this->state(),
                                                            output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&
       ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
             ? _internal_metadata_.unknown_fields()
             : _internal_metadata_.default_instance()),
        output);
  }
  // @@protoc_insertion_point(serialize_end:fc_pb.ControllerState)
}

::google::protobuf::uint8 *
ControllerState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8 *target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fc_pb.ControllerState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  // .fc_pb.ControllerState.State state = 1;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
        1, this->state(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&
       ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
                 ? _internal_metadata_.unknown_fields()
                 : _internal_metadata_.default_instance()),
            target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fc_pb.ControllerState)
  return target;
}

size_t ControllerState::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:fc_pb.ControllerState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&
       ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
                 ? _internal_metadata_.unknown_fields()
                 : _internal_metadata_.default_instance()));
  }
  // .fc_pb.ControllerState.State state = 1;
  if (this->state() != 0) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(
                          this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControllerState::MergeFrom(const ::google::protobuf::Message &from) {
  // @@protoc_insertion_point(generalized_merge_from_start:fc_pb.ControllerState)
  GOOGLE_DCHECK_NE(&from, this);
  const ControllerState *source =
      ::google::protobuf::internal::DynamicCastToGenerated<
          const ControllerState>(&from);
  if (source == NULL) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:fc_pb.ControllerState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:fc_pb.ControllerState)
    MergeFrom(*source);
  }
}

void ControllerState::MergeFrom(const ControllerState &from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:fc_pb.ControllerState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if (from.state() != 0) {
    set_state(from.state());
  }
}

void ControllerState::CopyFrom(const ::google::protobuf::Message &from) {
  // @@protoc_insertion_point(generalized_copy_from_start:fc_pb.ControllerState)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void ControllerState::CopyFrom(const ControllerState &from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:fc_pb.ControllerState)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool ControllerState::IsInitialized() const { return true; }

void ControllerState::Swap(ControllerState *other) {
  if (other == this)
    return;
  InternalSwap(other);
}
void ControllerState::InternalSwap(ControllerState *other) {
  using std::swap;
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ControllerState::GetMetadata() const {
  protobuf_DevicesSpec_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DevicesSpec_2eproto::file_level_metadata
      [kIndexInFileMessages];
}

// ===================================================================

void Empty::InitAsDefaultInstance() {}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

Empty::Empty() : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DevicesSpec_2eproto::scc_info_Empty.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:fc_pb.Empty)
}
Empty::Empty(const Empty &from)
    : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:fc_pb.Empty)
}

void Empty::SharedCtor() {}

Empty::~Empty() {
  // @@protoc_insertion_point(destructor:fc_pb.Empty)
  SharedDtor();
}

void Empty::SharedDtor() {}

void Empty::SetCachedSize(int size) const { _cached_size_.Set(size); }
const ::google::protobuf::Descriptor *Empty::descriptor() {
  ::protobuf_DevicesSpec_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DevicesSpec_2eproto::file_level_metadata
      [kIndexInFileMessages]
          .descriptor;
}

const Empty &Empty::default_instance() {
  ::google::protobuf::internal::InitSCC(
      &protobuf_DevicesSpec_2eproto::scc_info_Empty.base);
  return *internal_default_instance();
}

void Empty::Clear() {
  // @@protoc_insertion_point(message_clear_start:fc_pb.Empty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  _internal_metadata_.Clear();
}

bool Empty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream *input) {
#define DO_(EXPRESSION)                                                        \
  if (!GOOGLE_PREDICT_TRUE(EXPRESSION))                                        \
  goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fc_pb.Empty)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p =
        input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second)
      goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
        input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:fc_pb.Empty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fc_pb.Empty)
  return false;
#undef DO_
}

void Empty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream *output) const {
  // @@protoc_insertion_point(serialize_start:fc_pb.Empty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&
       ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
             ? _internal_metadata_.unknown_fields()
             : _internal_metadata_.default_instance()),
        output);
  }
  // @@protoc_insertion_point(serialize_end:fc_pb.Empty)
}

::google::protobuf::uint8 *Empty::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8 *target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fc_pb.Empty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&
       ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target =
        ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
                 ? _internal_metadata_.unknown_fields()
                 : _internal_metadata_.default_instance()),
            target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fc_pb.Empty)
  return target;
}

size_t Empty::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:fc_pb.Empty)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&
       ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
        ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()
                 ? _internal_metadata_.unknown_fields()
                 : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Empty::MergeFrom(const ::google::protobuf::Message &from) {
  // @@protoc_insertion_point(generalized_merge_from_start:fc_pb.Empty)
  GOOGLE_DCHECK_NE(&from, this);
  const Empty *source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Empty>(&from);
  if (source == NULL) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:fc_pb.Empty)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:fc_pb.Empty)
    MergeFrom(*source);
  }
}

void Empty::MergeFrom(const Empty &from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:fc_pb.Empty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void)cached_has_bits;
}

void Empty::CopyFrom(const ::google::protobuf::Message &from) {
  // @@protoc_insertion_point(generalized_copy_from_start:fc_pb.Empty)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void Empty::CopyFrom(const Empty &from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:fc_pb.Empty)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool Empty::IsInitialized() const { return true; }

void Empty::Swap(Empty *other) {
  if (other == this)
    return;
  InternalSwap(other);
}
void Empty::InternalSwap(Empty *other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Empty::GetMetadata() const {
  protobuf_DevicesSpec_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_DevicesSpec_2eproto::file_level_metadata
      [kIndexInFileMessages];
}

// @@protoc_insertion_point(namespace_scope)
} // namespace fc_pb
namespace google {
namespace protobuf {
template <>
GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::fc_pb::Controller *
Arena::CreateMaybeMessage<::fc_pb::Controller>(Arena *arena) {
  return Arena::CreateInternal<::fc_pb::Controller>(arena);
}
template <>
GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::fc_pb::ControllerConfig *
Arena::CreateMaybeMessage<::fc_pb::ControllerConfig>(Arena *arena) {
  return Arena::CreateInternal<::fc_pb::ControllerConfig>(arena);
}
template <>
GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::fc_pb::Devices *
Arena::CreateMaybeMessage<::fc_pb::Devices>(Arena *arena) {
  return Arena::CreateInternal<::fc_pb::Devices>(arena);
}
template <>
GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::fc_pb::Fan *
Arena::CreateMaybeMessage<::fc_pb::Fan>(Arena *arena) {
  return Arena::CreateInternal<::fc_pb::Fan>(arena);
}
template <>
GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::fc_pb::Sensor *
Arena::CreateMaybeMessage<::fc_pb::Sensor>(Arena *arena) {
  return Arena::CreateInternal<::fc_pb::Sensor>(arena);
}
template <>
GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::fc_pb::DevicesRequest *
Arena::CreateMaybeMessage<::fc_pb::DevicesRequest>(Arena *arena) {
  return Arena::CreateInternal<::fc_pb::DevicesRequest>(arena);
}
template <>
GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::fc_pb::ControllerState *
Arena::CreateMaybeMessage<::fc_pb::ControllerState>(Arena *arena) {
  return Arena::CreateInternal<::fc_pb::ControllerState>(arena);
}
template <>
GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::fc_pb::Empty *
Arena::CreateMaybeMessage<::fc_pb::Empty>(Arena *arena) {
  return Arena::CreateInternal<::fc_pb::Empty>(arena);
}
} // namespace protobuf
} // namespace google

// @@protoc_insertion_point(global_scope)
